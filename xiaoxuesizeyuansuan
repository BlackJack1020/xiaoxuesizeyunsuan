  
#随机整数：rdnum，随机真分数分子：sdnum，随机真分数分母：mdnum
#随机四则运算符：rdsign
#出题数：qesd
#/第一代为二阶运算
#封装函数一：整数求解函数：zsResult；封装函数二：真分数求解函数：zfsResult；运算函数：result

import math
import random
import cProfile
import profile
from fractions import Fraction

def zsResult():
    qesd = int(input())
    for a in range(qesd):
        rdsign = random.choice(['+','-','*','/'])  
        rdnum1 = random.randint(0,100)
        rdnum2 = random.randint(0,100)
        if rdnum1 < rdnum2:
            rdnum1 = max(rdnum1, rdnum2)
            rdnum2 = min(rdnum1, rdnum2)
            result(rdsign,rdnum1,rdnum2)
        else:
            result(rdsign,rdnum1,rdnum2)

def zfsResult():
    qesd = int(input())
    for b in range(qesd):
        rdsign = random.choice(['+','-','*','/'])  
        sdnum1 = random.randint(0,100)
        mdnum1 = random.randint(1,100)
        zfs1 = Fraction(sdnum1, mdnum1)
        sdnum2 = random.randint(1,100)
        mdnum2 = random.randint(1,100)
        zfs2 = Fraction(sdnum2, mdnum2)
        if zfs1 < zfs2:
            zfs1 = max(zfs1, zfs2)
            zfs2 = min(zfs1, zfs2)
            result(rsign,zfs1,zfs2)
        else:
            result(rdsign,zfs1,zfs2)

def result(s,n1,n2):
    if s == '+':
        print('{} + {} = {}'.format(n1,n2,n1 + n2))
    elif s == '-':
        print('{} - {} = {}'.format(n1,n2,n1 - n2))
    elif s == '*':
        print('{} * {} = {}'.format(n1,n2,n1 * n2))
    elif s == '/':
        if n2 == 0:
            print('***除数不能为零***')
        else:
            print('{} / {} = {}'.format(n1,n2,n1 / n2))
    else:
        print('输入有误，请重新输入！')
 
def main():
    fangshi = str(input())
    if fangshi == 'zs':
        zsResult()
    elif fangshi == 'zfs':
        zfsResult()
    else:
        print('输入有误，请重新输入！')
        
cProfile.run('main()') 
main()
